{
  "_args": [
    [
      {
        "raw": "css-mqpacker@^5.0.1",
        "scope": null,
        "escapedName": "css-mqpacker",
        "name": "css-mqpacker",
        "rawSpec": "^5.0.1",
        "spec": ">=5.0.1 <6.0.0",
        "type": "range"
      },
      "/Users/pasqualevitiello/My Folder/Job/Projects/Gits/IO-framework"
    ]
  ],
  "_from": "css-mqpacker@>=5.0.1 <6.0.0",
  "_id": "css-mqpacker@5.0.1",
  "_inCache": true,
  "_location": "/css-mqpacker",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/css-mqpacker-5.0.1.tgz_1462604871304_0.9278890830464661"
  },
  "_npmUser": {
    "name": "hail2u",
    "email": "hail2u@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "css-mqpacker@^5.0.1",
    "scope": null,
    "escapedName": "css-mqpacker",
    "name": "css-mqpacker",
    "rawSpec": "^5.0.1",
    "spec": ">=5.0.1 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-5.0.1.tgz",
  "_shasum": "6f2d62252623fd7c33a68e1b88dc1370c885921e",
  "_shrinkwrap": null,
  "_spec": "css-mqpacker@^5.0.1",
  "_where": "/Users/pasqualevitiello/My Folder/Job/Projects/Gits/IO-framework",
  "author": {
    "name": "Kyo Nagashima",
    "email": "hail2u@gmail.com",
    "url": "https://kyonagashima.com/"
  },
  "bin": {
    "mqpacker": "./bin/mqpacker.js"
  },
  "bugs": {
    "url": "https://github.com/hail2u/node-css-mqpacker/issues"
  },
  "dependencies": {
    "minimist": "^1.1.1",
    "postcss": "^5.0.0"
  },
  "description": "Pack same CSS media query rules into one media query rule.",
  "devDependencies": {
    "nodeunit": "^0.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6f2d62252623fd7c33a68e1b88dc1370c885921e",
    "tarball": "https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-5.0.1.tgz"
  },
  "engines": {
    "node": ">=5.0.0"
  },
  "gitHead": "a31b41c3ee43afc19b5365ecba3ad194990fbc1f",
  "homepage": "https://github.com/hail2u/node-css-mqpacker",
  "keywords": [
    "css",
    "media",
    "postcss-plugin",
    "query"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hail2u",
      "email": "kyo@hail2u.net"
    }
  ],
  "name": "css-mqpacker",
  "optionalDependencies": {},
  "readme": "CSS MQPacker\n============\n\nPack same CSS media query rules into one media query rule.\n\nWritten with [PostCSS][1].\n\n\nSYNOPSIS\n--------\n\nA CSS file processed with a CSS pre-processor may have same queries that can\nmerge:\n\n```css\n.foo::before {\n  content: \"foo on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n```\n\nThis PostCSS plugin packs exactly same queries (and optionally sorts) like this:\n\n```css\n.foo::before {\n  content: \"foo on small\";\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n```\n\n\nINSTALL\n-------\n\n    $ npm install css-mqpacker\n\n\nUSAGE\n-----\n\nOf course, this package can be used as PostCSS plugin:\n\n```javascript\n#!/usr/bin/env node\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar postcss = require(\"postcss\");\n\nvar css = fs.readFileSync(\"from.css\", \"utf8\");\npostcss([\n  require(\"autoprefixer-core\")(),\n  require(\"css-mqpacker\")()\n]).process(css).then(function (result) {\n  console.log(result.css);\n});\n```\n\n\n### As standard Node.js package\n\nRead `from.css`, process its content, and output processed CSS to STDOUT.\n\n```javascript\n#!/usr/bin/env node\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar mqpacker = require(\"css-mqpacker\");\n\nvar original = fs.readFileSync(\"from.css\", \"utf8\");\nvar processed = mqpacker.pack(original, {\n  from: \"from.css\",\n  map: {\n    inline: false\n  },\n  to: \"to.css\"\n});\nconsole.log(processed.css);\n```\n\n\n### As CLI Program\n\nThis package also installs a command line interface.\n\n    $ node ./node_modules/.bin/mqpacker --help\n    Usage: mqpacker [options] INPUT [OUTPUT]\n    \n    Description:\n      Pack same CSS media query rules into one media query rule.\n    \n    Options:\n      -s, --sort       Sort `min-width` queries.\n          --sourcemap  Create source map file.\n      -h, --help       Show this message.\n      -v, --version    Print version information.\n    \n    Use a single dash for INPUT to read CSS from standard input.\n\nWhen PostCSS failed to parse INPUT, CLI shows a CSS parse error in GNU error\nformat instead of Node.js stack trace.\n\nThe `--sort` option does not currently support a custom function.\n\n\nOPTIONS\n-------\n\n### sort\n\nBy default, CSS MQPacker pack and order media queries as they are defined. If\nyou want to sort queries automatically, pass `sort: true` to this module.\n\n```javascript\npostcss([\n  mqpacker({\n    sort: true\n  })\n]).process(css);\n```\n\nCurrently, this option only supports `min-width` queries with specific units\n(`ch`, `em`, `ex`, `px`, and `rem`). If you want to do more, you need to create\nyour own sorting function and pass it to this module like this:\n\n```javascript\npostcss([\n  mqpacker({\n    sort: function (a, b) {\n      return a.localeCompare(b);\n    }\n  })\n]).process(css);\n```\n\nIn this example, all your queries will sort by A-Z order.\n\nThis sorting function directly pass to `Array#sort()` method of an array of all\nyour queries.\n\n\nAPI\n---\n\n### pack(css, [options])\n\nPacks media queries in `css`.\n\nThe second argument is optional. The `options` is same as the second argument of\nPostCSSâ€™s `process()` method. This is useful for generating Source Map.\n\n```javascript\nvar fs = require(\"fs\");\nvar mqpacker = require(\"css-mqpacker\");\n\nvar css = fs.readFileSync(\"from.css\", \"utf8\");\nvar result = mqpacker.pack(css, {\n  from: \"from.css\",\n  map: {\n    inline: false\n  },\n  to: \"to.css\"\n});\nfs.writeFileSync(\"to.css\", result.css);\nfs.writeFileSync(\"to.css.map\", result.map);\n```\n\nSee also [PostCSS document][2] for more about this `options`.\n\n\nLICENSE\n-------\n\nMIT: http://hail2u.mit-license.org/2014\n\n\n[1]: https://github.com/postcss/postcss\n[2]: https://github.com/postcss/postcss#source-map\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hail2u/node-css-mqpacker.git"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "version": "5.0.1"
}
